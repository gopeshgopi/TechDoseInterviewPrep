Find Missing And Repeating Number 


Given an unsorted array Arr of size N of positive integers. One number 'A' from set {1, 2, â€¦N} is missing and one number 'B' occurs twice in array. Find these two numbers.

Example 1:

Input:
N = 2
Arr[] = {2, 2}
Output: 2 1
Explanation: Repeating number is 2 and 
smallest positive missing number is 1.
Example 2:

Input:
N = 3
Arr[] = {1, 3, 3}
Output: 3 2
Explanation: Repeating number is 3 and 
smallest positive missing number is 2.


#############################################################################################################

// { Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    // Driver code
    public static void main(String[] args) throws Exception {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while (t-- > 0) {
            int n = Integer.parseInt(br.readLine().trim());
            String[] str = br.readLine().split(" ");

            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = Integer.parseInt(str[i]);
            }

            int[] ans = new Solve().findTwoElement(a, n);
            System.out.println(ans[0] + " " + ans[1]);
        }
    }
}// } Driver Code Ends


// User function Template for Java

class Solve {
    int XOR(int n)
    {
        if(n%4==0) return n;
        else if(n%4==1) return 1;
        else if(n%4 == 2) return n+1;
        else return 0;
    }
    int[] findTwoElement(int arr[], int n) {
        int arrXor = 0;
        for(int i=0;i<n;i++)
        {
            arrXor = arrXor ^ arr[i];
            
        }
        int numbersXor  = arrXor^(XOR(n));
        int countofLSB = 0;
        while(numbersXor != 0)
        {
            if((numbersXor & (1<<countofLSB)) >0)
            {
                break;
            }
            countofLSB++;
        }
        int num1=0,num2=0;
        for(int i=0;i<n;i++)
        {
            if((arr[i]&(1<<countofLSB)) > 0)
            {
                num1 = num1 ^ arr[i];
            }
           else
            {
                num2 = num2 ^ arr[i];
            }
            
        }
         for(int i=1;i<=n;i++)
        {
         if((i&(1<<countofLSB)) > 0)
            {
                num1 = num1 ^ i;
            }
           else
            {
                num2 = num2 ^ i;
            }
        }
        int flag =0;
        
        for(int i=0;i<n;i++)
        {
            if(arr[i] == num1)
            {
                flag=1;
                break;
            }
            
        }
        
        int a[] = new int[2];
        if(flag ==1)
        {
        a[0]=num1;
        a[1] = num2;
        }
        else{
            a[0]=num2;
        a[1] = num1;
            
        }
        return a;
        
        
        
    }
}
