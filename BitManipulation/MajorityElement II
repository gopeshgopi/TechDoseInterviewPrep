Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 source - https://leetcode.com/problems/majority-element-ii/

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

#############################################################

class Solution {
    public boolean CheckIsMajority(int n,int[] nums)
    {
        int c=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i] == n)
                c++;
        }
        if(c> (nums.length/3))
            return true;
        else
        return false;
    }
    public List<Integer> majorityElement(int[] nums) {
        int number1 = -12345678,number2=-123456788,count1=0,count2=0;
        for(int i=0;i<nums.length;i++)
        {
            if(number1 == nums[i])
            {
                count1++;
            }
            else if(number2 == nums[i])
            {
                count2++;
            }
            else if(count1 == 0)
            {
                number1 = nums[i];
                count1=1;
            }
            else if(count2 == 0)
            {
                number2 = nums[i];
                count2 = 1;
            }
            else{
                count1--;
                count2--;
            }
        }
        List<Integer> l = new ArrayList<>();
        if(CheckIsMajority(number1,nums))
        {
            l.add(number1);
        }
        if(CheckIsMajority(number2,nums))
        {
            l.add(number2);
        }
        
        return l;
        
    }
}
